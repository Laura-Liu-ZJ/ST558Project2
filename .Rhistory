kable(Accuracytable,
row.names=TRUE,
col.names = c("Train","Test"),
caption = "Accuracy Table")
kable(APERtable ,
row.names=TRUE,
col.names = c("Train","Test"),
caption = "APER Table")
# the best model for training data set
bestTrainModel <- APERtable %>% arrange(Accuracy)
rownames(bestTrainModel[1,])
# the best model for testing data set
bestTestModel <- APERtable %>% arrange(Accuracy.1)
rownames(bestTestModel[1,])
corrplot.mixed(cor(newsDataFit,use="na.or.complete"), lower.col = "steelblue", number.cex = 1)
# prepare for the packages
library(readr)
library(tidyverse)
library(leaps)
library(caret)
library(knitr)
library(corrplot)
corrplot.mixed(cor(newsDataFit,use="na.or.complete"), lower.col = "steelblue", number.cex = 1)
corrplot.mixed(cor(newsDataFit[,-1],use="na.or.complete"), lower.col = "steelblue", number.cex = 1)
corData <- cbind(read_csv("data/OnlineNewsPopularity.csv")%>% select(shares),newsDataFit[,-1])
corData <- cbind(read_csv("data/OnlineNewsPopularity.csv")%>%
filter(weekday_is_monday==1)%>%
select(shares),newsDataFit[,-1])
corrplot.mixed(cor(as.numeric(newsDataFit)), lower.col = "steelblue", number.cex = 1)
cor(newsDataFit[,-1],newsDataFit$shares)
newsDataFit
colnames(newsDataFit)
newsDataTrain
p_idx <- which(cor(newsDataFit[,-1],newsDataFit$sharesInd) > 0)
p_idx <- which(cor(newsDataFit[,-1],as.numeric(newsDataFit$sharesInd)) > 0)
p_idx
cor(newsDataFit[,-1],as.numeric(newsDataFit$sharesInd)
)
newsDataFit
newsDataFit[,-1]
as.numeric(newsDataFit$sharesInd)
newsDataFit
cor(newsDataFit[,-1],as.numeric(newsDataFit$sharesInd)
)
which(cor(newsDataFit[,-1],as.numeric(newsDataFit$sharesInd)) > 0)
colnames(newsDataFit)[p_idx+1]
p_idx <- which(cor(newsDataFit[,-1],as.numeric(newsDataFit$sharesInd)) > 0)
n_idx <- which(cor(newsDataFit[,-1],as.numeric(newsDataFit$sharesInd)) < 0)
print("Positive relationships")
colnames(newsDataFit)[p_idx+1]
print("Negative relationships")
colnames(newsDataFit)[n_idx+1]
cor.data <- cbind(as.numeri(newsDataFit[,1]),newsDataFit[,-1])
cor.data <- cbind(as.numeric(newsDataFit[,1]),newsDataFit[,-1])
cor.data <- cbind(as.numeric(newsDataFitt$sharesInd),newsDataFit[,-1])
cor.data <- cbind(as.numeric(newsDataFit$sharesInd),newsDataFit[,-1])
corrplot.mixed(cor(cor.data), lower.col = "steelblue", number.cex = 1)
p_idx <- which(cor(newsDataFit[,-1],as.numeric(newsDataFit$sharesInd)) > 0)
n_idx <- which(cor(newsDataFit[,-1],as.numeric(newsDataFit$sharesInd)) < 0)
# Positive relationships
colnames(newsDataFit)[p_idx+1]
# Negative relationships
colnames(newsDataFit)[n_idx+1]
cor.data <- cbind(as.numeric(newsDataFit$sharesInd),newsDataFit[,-1])
corrplot(cor(cor.data), lower.col = "steelblue",type=upper)
cor.data <- cbind(as.numeric(newsDataFit$sharesInd),newsDataFit[,-1])
corrplot(cor(cor.data), lower.col = "steelblue",type="upper")
p_idx <- which(cor(newsDataFit[,-1],as.numeric(newsDataFit$sharesInd)) > 0)
n_idx <- which(cor(newsDataFit[,-1],as.numeric(newsDataFit$sharesInd)) < 0)
# Positive relationships
colnames(newsDataFit)[p_idx+1]
# Negative relationships
colnames(newsDataFit)[n_idx+1]
shares <- as.numeric(newsDataFit$sharesInd)
cor.data <- cbind(shares,newsDataFit[,-1])
corrplot(cor(cor.data), lower.col = "steelblue",type="upper")
p_idx <- which(cor(newsDataFit[,-1],as.numeric(newsDataFit$sharesInd)) > 0)
n_idx <- which(cor(newsDataFit[,-1],as.numeric(newsDataFit$sharesInd)) < 0)
# Positive relationships
colnames(newsDataFit)[p_idx+1]
# Negative relationships
colnames(newsDataFit)[n_idx+1]
shares <- as.numeric(newsDataFit$sharesInd)
cor.data <- cbind(shares,newsDataFit[,-1])
corrplot(cor(cor.data), lower.col = "steelblue",type="upper")
p_idx <- which(cor(cor.data) > 0)
n_idx <- which(cor(cor.data) < 0)
# Positive relationships
colnames(newsDataFit)[p_idx+1]
# Negative relationships
colnames(newsDataFit)[n_idx+1]
shares <- as.numeric(newsDataFit$sharesInd)
cor.data <- cbind(shares,newsDataFit[,-1])
corrplot(cor(cor.data), lower.col = "steelblue",type="upper")
p_idx <- which(cor(newsDataFit[,-1],as.numeric(newsDataFit$sharesInd)) > 0)
n_idx <- which(cor(newsDataFit[,-1],as.numeric(newsDataFit$sharesInd)) < 0)
# Positive relationships
colnames(newsDataFit)[p_idx+1]
# Negative relationships
colnames(newsDataFit)[n_idx+1]
shares <- as.numeric(newsDataTrain$sharesInd)
cor.data <- cbind(shares,newsDataTrain[,-1])
corrplot(cor(cor.data), lower.col = "steelblue",type="upper")
p_idx <- which(cor(newsDataTrain[,-1],as.numeric(newsDataTrain$sharesInd)) > 0)
n_idx <- which(cor(newsDataTrain[,-1],as.numeric(newsDataTrain$sharesInd)) < 0)
# Positive relationships
colnames(newsDataTrain)[p_idx+1]
# Negative relationships
colnames(newsDataTrain)[n_idx+1]
# reorganize the data to do the correlation analysis
shares <- as.numeric(newsDataTrain$sharesInd)
cor.data <- cbind(shares,newsDataTrain[,-1])
corrplot(cor(cor.data), lower.col = "steelblue",type="upper")
# get the name of variables who have positive or negative relationship with our response
p_idx <- which(cor(newsDataTrain[,-1],as.numeric(newsDataTrain$sharesInd)) > 0)
n_idx <- which(cor(newsDataTrain[,-1],as.numeric(newsDataTrain$sharesInd)) < 0)
# Positive relationships
colnames(newsDataTrain)[p_idx+1]
# Negative relationships
colnames(newsDataTrain)[n_idx+1]
# reorganize the data to do the correlation analysis
shares <- as.numeric(newsDataTrain$sharesInd)
cor.data <- cbind(shares,newsDataTrain[,-1])
corrplot(cor(cor.data), lower.col = "steelblue",type="upper",tl.cex = 0.01)
# get the name of variables who have positive or negative relationship with our response
p_idx <- which(cor(newsDataTrain[,-1],as.numeric(newsDataTrain$sharesInd)) > 0)
n_idx <- which(cor(newsDataTrain[,-1],as.numeric(newsDataTrain$sharesInd)) < 0)
# Positive relationships
colnames(newsDataTrain)[p_idx+1]
# Negative relationships
colnames(newsDataTrain)[n_idx+1]
# reorganize the data to do the correlation analysis
shares <- as.numeric(newsDataTrain$sharesInd)
cor.data <- cbind(shares,newsDataTrain[,-1])
corrplot(cor(cor.data), lower.col = "steelblue",type="upper",tl.cex = 0.5)
# get the name of variables who have positive or negative relationship with our response
p_idx <- which(cor(newsDataTrain[,-1],as.numeric(newsDataTrain$sharesInd)) > 0)
n_idx <- which(cor(newsDataTrain[,-1],as.numeric(newsDataTrain$sharesInd)) < 0)
# Positive relationships
colnames(newsDataTrain)[p_idx+1]
# Negative relationships
colnames(newsDataTrain)[n_idx+1]
# reorganize the data to do the correlation analysis
shares <- as.numeric(newsDataFit$sharesInd)
cor.data <- cbind(shares, newsDataFit[,-1])
corrplot(cor(cor.data), lower.col = "steelblue",type="upper",tl.cex = 0.7,title="correlation plot")
# get the name of variables who have positive or negative relationship with our response
p_idx <- which(cor(newsDataFit[,-1],as.numeric(newsDataFit$sharesInd)) > 0)
n_idx <- which(cor(newsDataFit[,-1],as.numeric(newsDataFit$sharesInd)) < 0)
# Positive relationships
colnames(newsDataFit)[p_idx+1]
# Negative relationships
colnames(newsDataFit)[n_idx+1]
# combine the accuracy of corss validation together
Accuracytable <- round(data.frame(Train=rbind(linearFit$overall[1],
treebagFit$results$Accuracy,
orgAccuracyTrain),
Test = rbind(linearResult$overall[1],
treebagResult$overall[1],
orgAccuracyTest),
row.names = c("Logistic Regression",
"Bagged Tree",
"Original Data")
),4)
# caculate the misclassification rate (Apparent Error)
APERtable <- 1-Accuracytable
# print the table
kable(Accuracytable,
row.names=TRUE,
col.names = c("Train","Test"),
caption = "Accuracy Table")
kable(APERtable ,
row.names=TRUE,
col.names = c("Train","Test"),
caption = "APER Table")
# the best model for training data set
bestTrainModel <- APERtable %>% arrange(Accuracy)
rownames(bestTrainModel[1,])
# the best model for testing data set
bestTestModel <- APERtable %>% arrange(Accuracy.1)
rownames(bestTestModel[1,])
bestTestModel[1,]
bestTestModel[1,2]
weekday
colnames(newsData)
colnames(read_csv("data/OnlineNewsPopularity.csv"))
setwd("D:/2020_3rd_semester/ST558/6. Project/Project2/ST558Project2")
colnames(read_csv("data/OnlineNewsPopularity.csv"))
weekdays <- c("monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday")
params <- lapply(paste0("weekday_is_", weekdays), FUN = function(x){list(weekday = x)})
reports <- tibble(paste0(weekdays, ".md"), params)
repoers
reports
reports[[2]]
knitr::opts_chunk$set(echo = TRUE,message = FALSE,warning = FALSE)
library(rmarkdown)
weekdays <- c("monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday")
params <- lapply(paste0("weekday_is_", weekdays), FUN = function(x){list(weekday = x)})
reports <- tibble(paste0(weekdays, ".md"), params)
apply(reports, MARGIN = 1, FUN = function(x){
render(input = "~/README.Rmd", output_file = x[[1]], params = x[[2]])
})
knitr::opts_chunk$set(echo = TRUE,message = FALSE,warning = FALSE)
library(rmarkdown)
weekdays <- c("monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday")
params <- lapply(paste0("weekday_is_", weekdays), FUN = function(x){list(weekday = x)})
reports <- tibble(paste0(weekdays, ".md"), params)
apply(reports, MARGIN = 1, FUN = function(x){
render(input = "README.Rmd", output_file = x[[1]], params = x[[2]])
})
newsData <- read_csv("data/OnlineNewsPopularity.csv")%>%
# for specific weekday
filter(.data[["weekday_is_monday"]]==1)%>%
# add new variable as an indicator of shares group
mutate(sharesInd = ifelse(shares < 1400,0,1))%>%
# select response and predictors we interested
select(sharesInd,
num_hrefs, num_self_hrefs, num_imgs, num_keywords,
n_tokens_content, n_unique_tokens,
data_channel_is_entertainment,
data_channel_is_bus,
data_channel_is_socmed,
data_channel_is_tech,
kw_min_min, kw_max_max, kw_max_avg, kw_avg_avg,
contains("LDA"),
title_sentiment_polarity,
global_subjectivity,
self_reference_avg_sharess,
min_positive_polarity)
newsData
toupper("monday")
help(toupper)
casefold("monday")
casefold("monday", upper = T)
knitr::opts_chunk$set(echo = TRUE,message = FALSE,warning = FALSE)
library(rmarkdown)
# weekdays <- c("monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday")
weekdays <- c("monday", "tuesday")
params <- lapply(weekdays, FUN = function(x){list(weekday = x)})
reports <- tibble(paste0(weekdays, ".md"), params)
apply(reports, MARGIN = 1, FUN = function(x){
render(input = "README.Rmd", output_file = x[[1]], params = x[[2]])
})
reports
apply(reports, MARGIN = 1, FUN = function(x){
render(input = "README.Rmd", output_file = x[[1]], params = x[[2]])
})
knitr::opts_chunk$set(echo = TRUE,message = FALSE,warning = FALSE)
library(rmarkdown)
# weekdays <- c("monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday")
weekdays <- c("monday", "tuesday")
params <- lapply(weekdays, FUN = function(x){list(weekday = x)})
reports <- tibble(paste0(weekdays, ".md"), params)
knitr::opts_chunk$set(echo = TRUE,message = FALSE,warning = FALSE)
# prepare for the packages
library(readr)
library(tidyverse)
library(leaps)
library(caret)
library(knitr)
library(corrplot)
library(rmarkdown)
# weekdays <- c("monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday")
weekdays <- c("monday", "tuesday")
params <- lapply(weekdays, FUN = function(x){list(weekday = x)})
reports <- tibble(paste0(weekdays, ".md"), params)
apply(reports, MARGIN = 1, FUN = function(x){
render(input = "README.Rmd", output_file = x[[1]], params = x[[2]])
})
library(rmarkdown)
# weekdays <- c("monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday")
weekdays <- c("monday", "tuesday")
params <- lapply(weekdays, FUN = function(x){list(weekday = x)})
reports <- tibble(paste0(weekdays, ".md"), params)
apply(reports, MARGIN = 1, FUN = function(x){
render(input = "README.Rmd", output_file = x[[1]], params = x[[2]])
})
# apply(reports, MARGIN = 1, FUN = function(x){
#   render(input = "README.Rmd", output_file = x[[1]], params = x[[2]])
# })
render(input = "README.Rmd", output_file = reports[[1]], params = reports[[2]])
reports[[1]]
reports[[2]]
reports[[1]][1]
reports[[2]][1]
# apply(reports, MARGIN = 1, FUN = function(x){
#   render(input = "README.Rmd", output_file = x[[1]], params = x[[2]])
# })
render(input = "README.Rmd", output_file = reports[[1]][1], params = reports[[2]][1])
weekday_is <- paste0("weekday_is_", params$weekday)
# read the raw data
newsData <- read_csv("data/OnlineNewsPopularity.csv")%>%
# for specific weekday
filter(.data[[weekday_is]]==1)%>%
# add new variable as an indicator of shares group
mutate(sharesInd = ifelse(shares < 1400,0,1))%>%
# select response and predictors we interested
select(sharesInd,
num_hrefs, num_self_hrefs, num_imgs, num_keywords,
n_tokens_content, n_unique_tokens,
data_channel_is_entertainment,
data_channel_is_bus,
data_channel_is_socmed,
data_channel_is_tech,
kw_min_min, kw_max_max, kw_max_avg, kw_avg_avg,
contains("LDA"),
title_sentiment_polarity,
global_subjectivity,
self_reference_avg_sharess,
min_positive_polarity)
library(rmarkdown)
library(tidyverse)
# weekdays <- c("monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday")
weekdays <- c("monday", "tuesday")
params <- lapply(weekdays, FUN = function(x){list(weekday = x)})
reports <- tibble(paste0(weekdays, ".md"), params)
apply(reports, MARGIN = 1, FUN = function(x){
render(input = "README.Rmd", output_file = x[[1]], params = x[[2]])
})
apply(reports, MARGIN = 1, FUN = function(x){
render(input = "README.Rmd", output_file = x[[1]], params = x[[2]])
})
params$weekday
test <- "monday"
weekday_is <- paste0("weekday_is_", test)
weekday_is
# read the raw data
newsData <- read_csv("data/OnlineNewsPopularity.csv")%>%
# for specific weekday
filter(.data[[weekday_is]]==1)%>%
# add new variable as an indicator of shares group
mutate(sharesInd = ifelse(shares < 1400,0,1))%>%
# select response and predictors we interested
select(sharesInd,
num_hrefs, num_self_hrefs, num_imgs, num_keywords,
n_tokens_content, n_unique_tokens,
data_channel_is_entertainment,
data_channel_is_bus,
data_channel_is_socmed,
data_channel_is_tech,
kw_min_min, kw_max_max, kw_max_avg, kw_avg_avg,
contains("LDA"),
title_sentiment_polarity,
global_subjectivity,
self_reference_avg_sharess,
min_positive_polarity)
newsData
test <- "sunday"
weekday_is <- paste0("weekday_is_", test)
# read the raw data
newsData <- read_csv("data/OnlineNewsPopularity.csv")%>%
# for specific weekday
filter(.data[[weekday_is]]==1)%>%
# add new variable as an indicator of shares group
mutate(sharesInd = ifelse(shares < 1400,0,1))%>%
# select response and predictors we interested
select(sharesInd,
num_hrefs, num_self_hrefs, num_imgs, num_keywords,
n_tokens_content, n_unique_tokens,
data_channel_is_entertainment,
data_channel_is_bus,
data_channel_is_socmed,
data_channel_is_tech,
kw_min_min, kw_max_max, kw_max_avg, kw_avg_avg,
contains("LDA"),
title_sentiment_polarity,
global_subjectivity,
self_reference_avg_sharess,
min_positive_polarity)
newsData
weekday_is <- paste0("weekday_is_", params$weekday)
# read the raw data
newsData <- read_csv("data/OnlineNewsPopularity.csv")%>%
# for specific weekday
filter(.data[[weekday_is]]==1)%>%
# add new variable as an indicator of shares group
mutate(sharesInd = ifelse(shares < 1400,0,1))%>%
# select response and predictors we interested
select(sharesInd,
num_hrefs, num_self_hrefs, num_imgs, num_keywords,
n_tokens_content, n_unique_tokens,
data_channel_is_entertainment,
data_channel_is_bus,
data_channel_is_socmed,
data_channel_is_tech,
kw_min_min, kw_max_max, kw_max_avg, kw_avg_avg,
contains("LDA"),
title_sentiment_polarity,
global_subjectivity,
self_reference_avg_sharess,
min_positive_polarity)
weekday_is
params$weekday
weekday_is <- paste0("weekday_is_", params$weekday)
weekday_is
params$weekday
apply(reports, MARGIN = 1, FUN = function(x){
render(input = "README.Rmd", output_file = x[[1]], params = x[[2]])
})
library(rmarkdown)
library(tidyverse)
weekdays <- c("monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday")
params <- lapply(weekdays, FUN = function(x){list(weekday = x)})
reports <- tibble(paste0(weekdays, ".md"), params)
apply(reports, MARGIN = 1, FUN = function(x){
render(input = "README.Rmd", output_file = x[[1]], params = x[[2]])
})
# reorganize the data to do the correlation analysis
shares <- as.numeric(newsDataFit$sharesInd)
cor.data <- cbind(shares, newsDataFit[,-1])
corrplot(cor(cor.data),
lower.col = "steelblue",
type="upper",
tl.cex = 0.7,
title="Correlation Plot",
mar=c(0,0,1,0))
# get the name of variables who have positive or negative relationship with our response
p_idx <- which(cor(newsDataFit[,-1],as.numeric(newsDataFit$sharesInd)) > 0)
n_idx <- which(cor(newsDataFit[,-1],as.numeric(newsDataFit$sharesInd)) < 0)
# Positive relationships
colnames(newsDataFit)[p_idx+1]
# Negative relationships
colnames(newsDataFit)[n_idx+1]
# reorganize the data to do the correlation analysis
shares <- as.numeric(newsDataFit$sharesInd)
cor.data <- cbind(shares, newsDataFit[,-1])
corrplot(cor(cor.data),
lower.col = "steelblue",
type="upper",
tl.cex = 0.7,
title="Correlation Plot",
mar=c(0,0,2,0))
# get the name of variables who have positive or negative relationship with our response
p_idx <- which(cor(newsDataFit[,-1],as.numeric(newsDataFit$sharesInd)) > 0)
n_idx <- which(cor(newsDataFit[,-1],as.numeric(newsDataFit$sharesInd)) < 0)
# Positive relationships
colnames(newsDataFit)[p_idx+1]
# Negative relationships
colnames(newsDataFit)[n_idx+1]
# reorganize the data to do the correlation analysis
shares <- as.numeric(newsDataFit$sharesInd)
cor.data <- cbind(shares, newsDataFit[,-1])
corrplot(cor(cor.data),
lower.col = "steelblue",
type="upper",
tl.cex = 0.7,
title="Correlation Plot",
mar=c(1,0,2,0))
# get the name of variables who have positive or negative relationship with our response
p_idx <- which(cor(newsDataFit[,-1],as.numeric(newsDataFit$sharesInd)) > 0)
n_idx <- which(cor(newsDataFit[,-1],as.numeric(newsDataFit$sharesInd)) < 0)
# Positive relationships
colnames(newsDataFit)[p_idx+1]
# Negative relationships
colnames(newsDataFit)[n_idx+1]
# reorganize the data to do the correlation analysis
shares <- as.numeric(newsDataFit$sharesInd)
cor.data <- cbind(shares, newsDataFit[,-1])
corrplot(cor(cor.data),
lower.col = "steelblue",
type="upper",
tl.cex = 0.7,
title="Correlation Plot",
mar=c(-1,0,2,0))
# reorganize the data to do the correlation analysis
shares <- as.numeric(newsDataFit$sharesInd)
cor.data <- cbind(shares, newsDataFit[,-1])
corrplot(cor(cor.data),
lower.col = "steelblue",
type="upper",
tl.cex = 0.7,
title="Correlation Plot",
mar=c(0,0,2,0))
# get the name of variables who have positive or negative relationship with our response
p_idx <- which(cor(newsDataFit[,-1],as.numeric(newsDataFit$sharesInd)) > 0)
n_idx <- which(cor(newsDataFit[,-1],as.numeric(newsDataFit$sharesInd)) < 0)
# Positive relationships
colnames(newsDataFit)[p_idx+1]
# Negative relationships
colnames(newsDataFit)[n_idx+1]
library(rmarkdown)
library(tidyverse)
weekdays <- c("monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday")
params <- lapply(weekdays, FUN = function(x){list(weekday = x)})
reports <- tibble(paste0(weekdays, ".md"), params)
apply(reports, MARGIN = 1, FUN = function(x){
render(input = "README.Rmd", output_file = x[[1]], params = x[[2]])
})
library(rmarkdown)
library(tidyverse)
weekdays <- c("monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday")
params <- lapply(weekdays, FUN = function(x){list(weekday = x)})
reports <- tibble(paste0(weekdays, ".md"), params)
apply(reports, MARGIN = 1, FUN = function(x){
render(input = "README.Rmd", output_file = x[[1]], params = x[[2]])
})
library(rmarkdown)
library(tidyverse)
weekdays <- c("monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday")
params <- lapply(weekdays, FUN = function(x){list(weekday = x)})
reports <- tibble(paste0(weekdays, ".md"), params)
apply(reports, MARGIN = 1, FUN = function(x){
render(input = "README.Rmd", output_file = x[[1]], params = x[[2]])
})
library(rmarkdown)
library(tidyverse)
weekdays <- c("monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday")
params <- lapply(weekdays, FUN = function(x){list(weekday = x)})
reports <- tibble(paste0(weekdays, ".md"), params)
apply(reports, MARGIN = 1, FUN = function(x){
render(input = "project2.Rmd", output_file = x[[1]], params = x[[2]])
})
